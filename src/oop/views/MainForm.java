package oop.views;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import oop.entities.DurableProduct;
import oop.entities.DurableProductHandler;
import oop.entities.PerishableProduct;
import oop.entities.PerishableProductHandler;
import oop.entities.Product;
import oop.entities.ProductHandler;
import oop.utils.ProductType;
import oop.views.strategies.InsertProductStrategy;
import oop.views.strategies.UpdateProductStrategy;
import oop.views.tablemodels.DurableProductTableModel;
import oop.views.tablemodels.PerishableProductTableModel;

/**
 *
 * @author --G--
 */
public class MainForm extends javax.swing.JFrame {

    private AbstractTableModel perishableTableModel;
    private AbstractTableModel durableTableModel;
    private List<PerishableProduct> perishableProducts;
    private List<DurableProduct> durableProducts;
    private ProductEventListener perishableEventListener;
    private ProductEventListener durableEventListener;
    private ProductEditorForm productEditorForm;
    private ProductHandler handler;
    private int tabIndex;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        setLocationRelativeTo(null);
        tabIndex = 0;
        setTabIndex();
        setPerishablePage();
        setDurablePage();
        popAlertIfNecessary();
        filterTableByName();
        perishableEventListener = new PerishableProductListener();
        durableEventListener = new DurableProductListener();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btNew = new javax.swing.JButton();
        btUpdate = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btExit = new javax.swing.JButton();
        paneProducts = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPerishableProducts = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDurableProducts = new javax.swing.JTable();
        btDepWith = new javax.swing.JButton();
        tfSearch = new javax.swing.JTextField();
        btSaveLog = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TheBestProductHandlerProgramEverMade");
        setLocationByPlatform(true);

        btNew.setText("New Product");
        btNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNewActionPerformed(evt);
            }
        });

        btUpdate.setText("Update Product");
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        btDelete.setText("Delete Product");
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });

        btExit.setText("Exit");
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });

        tblPerishableProducts.setAutoCreateRowSorter(true);
        tblPerishableProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPerishableProducts.setName(""); // NOI18N
        jScrollPane1.setViewportView(tblPerishableProducts);

        paneProducts.addTab("Perishable Products", jScrollPane1);

        tblDurableProducts.setAutoCreateRowSorter(true);
        tblDurableProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblDurableProducts);

        paneProducts.addTab("Durable Products", jScrollPane2);

        btDepWith.setText("Deposit/Withdraw");
        btDepWith.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDepWithActionPerformed(evt);
            }
        });

        btSaveLog.setText("SaveLog");
        btSaveLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveLogActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel1.setText("Filter By Product Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paneProducts)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btNew)
                        .addGap(18, 18, 18)
                        .addComponent(btUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btDelete)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tfSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addComponent(btDepWith)
                        .addGap(174, 174, 174)
                        .addComponent(btSaveLog)
                        .addGap(127, 127, 127)
                        .addComponent(btExit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneProducts, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btNew)
                    .addComponent(btUpdate)
                    .addComponent(btDelete)
                    .addComponent(btExit)
                    .addComponent(btDepWith)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btSaveLog))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void popAlertIfNecessary() {
        List<Product> result = new ArrayList<>();
        for (PerishableProduct perishableProduct : perishableProducts) {
            if (perishableProduct.getQuantity() < perishableProduct.getCriticalQuantity()) {
                result.add(perishableProduct);
            }
        }
        for (DurableProduct durableProduct : durableProducts) {
            if (durableProduct.getQuantity() < durableProduct.getCriticalQuantity()) {
                result.add(durableProduct);
            }
        }
        if (!result.isEmpty()) {
            popAlertWindow(result);
        }
    }

    private void popAlertWindow(List<Product> list) {
        CriticalQuantityAlert alert = new CriticalQuantityAlert(this, list);
        alert.setVisible(true);
    }

    private void initPerishableInsert() {
        productEditorForm = new ProductEditorForm(this, ProductType.PERISHABLE_PRODUCT);
        productEditorForm.addProductEventListener(perishableEventListener);
        productEditorForm.setProductHandlingStrategy(new InsertProductStrategy());
        productEditorForm.setVisible(true);

    }

    private void initDurableInsert() {
        productEditorForm = new ProductEditorForm(this, ProductType.DURABLE_PRODUCT);
        productEditorForm.addProductEventListener(durableEventListener);
        productEditorForm.setProductHandlingStrategy(new InsertProductStrategy());
        productEditorForm.setVisible(true);

    }

    private void initDurableDelete() {
        int i = tblDurableProducts.getSelectedRow();
        ProductDeleteForm form = new ProductDeleteForm(this, ProductType.DURABLE_PRODUCT, durableProducts.get(i));
        form.addProductEventListener(durableEventListener);
        form.setVisible(true);
    }

    private void initPerishableDelete() {
        int i = tblPerishableProducts.getSelectedRow();
        ProductDeleteForm form = new ProductDeleteForm(this, ProductType.PERISHABLE_PRODUCT, perishableProducts.get(i));
        form.addProductEventListener(perishableEventListener);
        form.setVisible(true);
    }

    private void filterTableByName() {
        switch (tabIndex) {
            case 0:
                if (!perishableProducts.isEmpty()) {
                    filterPerishableTableByName();
                }
                break;
            case 1:
                if (!durableProducts.isEmpty()) {
                    filterDurableTableByName();
                }
                break;
        }
    }

    private void filterPerishableTableByName() {
        tfSearch.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                filterPerishableTable(tfSearch.getText().
                        toLowerCase());
            }
        });
    }

    private void filterDurableTableByName() {
        tfSearch.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                filterDurableTable(tfSearch.getText().
                        toLowerCase());
            }
        });
    }

    private void filterPerishableTable(String search) {
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tblPerishableProducts.getModel());
        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + search, 1));
        tblPerishableProducts.setRowSorter(sorter);
        refreshPerishableTable();
    }

    private void filterDurableTable(String search) {
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tblDurableProducts.getModel());
        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + search, 1));
        tblDurableProducts.setRowSorter(sorter);
        refreshDurableTable();
    }

    private void refreshDurableTable() {
        durableTableModel.fireTableDataChanged();
        tblDurableProducts.repaint();
    }

    private void refreshPerishableTable() {
        perishableTableModel.fireTableDataChanged();
        tblPerishableProducts.repaint();

    }

    private class PerishableProductListener implements ProductEventListener<PerishableProduct> {

        @Override
        public void productCreated(PerishableProduct p) {
            perishableProducts.add(p);
            drawTable();
        }

        @Override
        public void productUpdated(PerishableProduct p) {
            updateProduct(p);
            drawTable();
        }

        @Override
        public void productDeleted(PerishableProduct p) {
            perishableProducts.remove(p);
            drawTable();
        }

        private void drawTable() {
            perishableTableModel.fireTableDataChanged();
            tblPerishableProducts.repaint();
        }

        private void updateProduct(PerishableProduct updatedProduct) {
            int i = 0;
            boolean productFound = false;
            while (i < perishableProducts.size() && !productFound) {
                if (perishableProducts.get(i).
                        getArticleNumber().
                        equals(updatedProduct.getArticleNumber())) {
                    perishableProducts.set(i, updatedProduct);
                    productFound = true;
                }
                i++;
            }
        }
    }

    private class DurableProductListener implements ProductEventListener<DurableProduct> {

        @Override
        public void productCreated(DurableProduct p) {
            durableProducts.add(p);
            drawTable();
        }

        @Override
        public void productUpdated(DurableProduct p) {
            updateProduct(p);
            drawTable();
        }

        @Override
        public void productDeleted(DurableProduct p) {
            durableProducts.remove(p);
            drawTable();
        }

        private void drawTable() {
            durableTableModel.fireTableDataChanged();
            tblDurableProducts.repaint();
        }

        private void updateProduct(DurableProduct updatedProduct) {
            int i = 0;
            boolean productFound = false;
            while (i < durableProducts.size() && !productFound) {
                if (durableProducts.get(i).
                        getArticleNumber().
                        equals(updatedProduct.getArticleNumber())) {
                    durableProducts.set(i, updatedProduct);
                    productFound = true;
                }
                i++;
            }
        }
    }

    private void btNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNewActionPerformed
        switch (tabIndex) {
            case 0:
                initPerishableInsert();
                break;
            case 1:
                initDurableInsert();
                break;
        }
    }//GEN-LAST:event_btNewActionPerformed

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
        dispose();
    }//GEN-LAST:event_btExitActionPerformed

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
        switch (tabIndex) {
            case 0:
                if (tblPerishableProducts.getSelectedRow() > -1 && !perishableProducts.isEmpty()) {
                    initPerishableUpdate();
                }
                break;
            case 1:
                if (tblDurableProducts.getSelectedRow() > -1 && !durableProducts.isEmpty()) {
                    initDurableUpdate();
                }
                break;
        }
    }//GEN-LAST:event_btUpdateActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        switch (tabIndex) {
            case 0:
                if (tblPerishableProducts.getSelectedRow() > -1 && !perishableProducts.isEmpty()) {
                    initPerishableDelete();
                }
                break;
            case 1:
                if (tblDurableProducts.getSelectedRow() > -1 && !durableProducts.isEmpty()) {
                    initDurableDelete();
                }
                break;
        }
    }//GEN-LAST:event_btDeleteActionPerformed

    private void btSaveLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveLogActionPerformed
        File logFile = new File("transactions.log");
        JFileChooser fileChooser = new JFileChooser();
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File saveFile = fileChooser.getSelectedFile();
            try {
                Files.copy(logFile.toPath(), saveFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                try ( FileWriter writer = new FileWriter(logFile)) {
                    writer.write("");
                }
                JOptionPane.showMessageDialog(this, "File saved successfully.");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "There is nothing to save.");
            }
        }
    }//GEN-LAST:event_btSaveLogActionPerformed

    private void btDepWithActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDepWithActionPerformed
        // TODO add your handling code here:
        switch (tabIndex) {
            case 0:
                if (tblPerishableProducts.getSelectedRow() > -1 && !perishableProducts.isEmpty()) {
                    initPerishableDepositWithdrawForm(perishableProducts);
                }
                break;
            case 1:
                if (tblDurableProducts.getSelectedRow() > -1 && !durableProducts.isEmpty()) {
                    initDurableDepositWithdrawForm(durableProducts);
                }
                break;
        }
    }//GEN-LAST:event_btDepWithActionPerformed

    private void initPerishableDepositWithdrawForm(List<PerishableProduct> list) {
        int index = tblPerishableProducts.getSelectedRow();
        Product p = list.get(index);
        DepositWithdrawForm form = new DepositWithdrawForm(ProductType.PERISHABLE_PRODUCT, p);
        form.addProductEventListener(perishableEventListener);
        form.setVisible(true);
    }

    private void initDurableDepositWithdrawForm(List<DurableProduct> list) {
        int index = tblDurableProducts.getSelectedRow();
        Product p = list.get(index);
        DepositWithdrawForm form = new DepositWithdrawForm(ProductType.DURABLE_PRODUCT, p);
        form.addProductEventListener(durableEventListener);
        form.setVisible(true);
    }

    private void initPerishableUpdate() {
        int index = tblPerishableProducts.getSelectedRow();
        productEditorForm = new ProductEditorForm(this, ProductType.PERISHABLE_PRODUCT, perishableProducts.get(index));
        productEditorForm.addProductEventListener(perishableEventListener);
        productEditorForm.setProductHandlingStrategy(new UpdateProductStrategy());
        productEditorForm.setVisible(true);

    }

    private void initDurableUpdate() {
        int index = tblDurableProducts.getSelectedRow();
        productEditorForm = new ProductEditorForm(this, ProductType.DURABLE_PRODUCT, durableProducts.get(index));
        productEditorForm.addProductEventListener(durableEventListener);
        productEditorForm.setProductHandlingStrategy(new UpdateProductStrategy());
        productEditorForm.setVisible(true);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
                    getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.
                            getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).
                    log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).
                    log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).
                    log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).
                    log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btDepWith;
    private javax.swing.JButton btExit;
    private javax.swing.JButton btNew;
    private javax.swing.JButton btSaveLog;
    private javax.swing.JButton btUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane paneProducts;
    private javax.swing.JTable tblDurableProducts;
    private javax.swing.JTable tblPerishableProducts;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables

    private void setPerishablePage() {
        handler = new PerishableProductHandler();
        perishableProducts = handler.getAllProducts();
        perishableTableModel = new PerishableProductTableModel(perishableProducts);
        tblPerishableProducts.setModel(perishableTableModel);

    }

    private void setDurablePage() {
        handler = new DurableProductHandler();
        durableProducts = handler.getAllProducts();
        durableTableModel = new DurableProductTableModel(durableProducts);
        tblDurableProducts.setModel(durableTableModel);
    }

    private void setTabIndex() {
        paneProducts.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                tabIndex = paneProducts.getSelectedIndex();
            }
        });
    }

}
